import re
import os
import datetime
import logging

from pyairtable import Table
from pyairtable.formulas import match
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ApplicationBuilder, ContextTypes, CommandHandler, ConversationHandler, CallbackQueryHandler, MessageHandler, filters

TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
AIRTABLE_TOKEN = os.getenv("AIRTABLE_TOKEN")
AIRTABLE_ID = os.getenv("AIRTABLE_ID")

logging.basicConfig(format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO)
logger = logging.getLogger(__name__)

table = Table(AIRTABLE_TOKEN, AIRTABLE_ID, 'flatmates')

START_ROUTES, END_ROUTES = range(2)
WHOIS_CLEANING, ADD_FLATMATE, FUCK_OFF = range(3)


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Send message on `/start`."""
    user = update.message.from_user
    chat_id = update.effective_message.chat_id
    logger.info("User %s started the conversation.", user.username)

    if not context.job_queue.get_jobs_by_name('daily_routine'):
        time = datetime.time(hour=8, minute=0)
        context.job_queue.run_daily(daily_routine, time=time, chat_id=chat_id, name='daily_routine', days=(0,1,2,3,4,5,6))
    
    keyboard = [
        [InlineKeyboardButton("üßª –•—Ç–æ –ø—Ä–∏–±–∏—Ä–∞—î?", callback_data=str(WHOIS_CLEANING))],
        [InlineKeyboardButton("üìù –ó–∞–ø–∏—Å–∞—Ç–∏—Å—è –Ω–∞ –ø—Ä–∏–±–∏—Ä–∞–Ω–Ω—è", callback_data=str(ADD_FLATMATE))],
        [InlineKeyboardButton("üòò –ë–æ—Ç —è–∫ —Å—è –º–∞—î—à?", callback_data=str(FUCK_OFF))]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(
        "–ü—Ä–∏–≤—ñ—Ç —Ö–æ–∑—è—ó–≤–∞! –Ø —á–æ—Ä—Ç —Ç–∞—Ä–∞—Å üòà \n\n"
        "–©–æ —Ö–æ—á–µ—à?", 
        reply_markup=reply_markup)
    return START_ROUTES


async def daily_routine(context: ContextTypes.DEFAULT_TYPE) -> None:
    """Send daily message based on weekday"""
    job = context.job
    weekday = datetime.datetime.today().weekday()
    weekdays = ['–ü–æ–Ω–µ–¥—ñ–ª–æ–∫', '–í—ñ–≤—Ç–æ—Ä–æ–∫', '–°–µ—Ä–µ–¥–∞', '–ß–µ—Ç–≤–µ—Ä', '–ü º—è—Ç–Ω–∏—Ü—è', '–°—É–±–æ—Ç–∞', '–ù–µ–¥—ñ–ª—è']
    message = f'–î–æ–±—Ä–∏–π —Ä–∞–Ω–æ–∫, —Å—å–æ–≥–æ–¥–Ω—ñ {weekdays[weekday].lower()}!'

    await context.bot.send_message(job.chat_id, text=message)

async def daily(update: Update, context:ContextTypes.DEFAULT_TYPE) -> None:
    context.job_queue.run_once(daily_routine, 0, chat_id=update.effective_message.chat_id)
    await context.bot.send_photo(
        chat_id=update.effective_chat.id,
        caption='–•—É–π–æ–≤–∏–π –¥–µ–Ω—å? –û—Ç —Ç–æ–±—ñ –∫—ñ—Ç –¥–ª—è –Ω–∞—Å—Ç—Ä–æ—é!',
        photo=f'https://thiscatdoesnotexist.com/?ts={datetime.datetime.now()}')

async def done(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user = update.message.from_user
    cleaner_record = table.first(formula=match({"isCleaning": True}))
    cleaner = cleaner_record['fields']['username']
    records = table.all(sort=['Created'])

    if cleaner == user.username:
        for idx, record in enumerate(records):
            if record == cleaner_record:
                new_cleaner_record = records[0] if len(records) == idx + 1 else records[idx + 1]
                new_cleaner = new_cleaner_record['fields']['username']
                table.update(new_cleaner_record['id'], {'isCleaning': True})
                table.update(cleaner_record['id'], {'isCleaning': False})
                await update.message.reply_text(f'–†–∞–± @{cleaner} –∫–∞–∂–µ —â–æ –ø—Ä–∏–±—Ä–∞–≤—Å—è, –∞–ª–µ —è –± –π–æ–º—É –Ω–µ –≤—ñ—Ä–∏–≤! –ù–∞—Å—Ç—É–ø–Ω–∏–º —Ö–∞—Ç—É –ø—Ä–∏–±–∏—Ä–∞—î @{new_cleaner}')
    else:
        await update.message.reply_text(f'@{user.username} —Ç–∏ –Ω–∞—â–æ –ø—Ä–∏–±—Ä–∞–≤—Å—è, –∑–∞—Ä–∞–∑ –Ω–µ —Ç–≤–æ—è —á–µ—Ä–≥–∞?\n\n–ö–ª—è—Ç–∏–π –º–æ—Å–∫–∞—Å—å @{cleaner}, —Ç–∏ —á–æ–º—É –ø—Ä–æ–ø—É—Å—Ç–∏–≤ —Å–≤–æ—é —á–µ—Ä–≥—É? –ë—É–¥–µ—à –ø—Ä–∏–±–∏—Ä–∞—Ç–∏ –Ω–∞ –Ω–∞—Å—Ç—É–ø–Ω–æ–º—É —Ç–∏–∂–Ω—ñ.')

async def add_flatmate(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Add flatmate to the Airtable."""
    text = ''
    flatmate = update.callback_query.from_user
    record = table.first(formula=match({"id": flatmate.id}))

    if record:
        text = f'@{flatmate.username} –≤–∂–µ –∑–∞–ø–∏—Å–∞–Ω–∏–π –¥–æ —Å–ø–∏—Å–∫—É —Ä–∞–±—ñ–≤ —Ü—ñ—î—ó –∫–≤–∞—Ä—Ç–∏—Ä–∏.'
    else:
        table.create({'id': flatmate.id, 'username': flatmate.username})
        text = f'–ó–∞–ø–∏—Å–∞–≤ @{flatmate.username} –¥–æ —Ä–∞–±—ñ–≤ —Ü—ñ—î—ó –∫–≤–∞—Ä—Ç–∏—Ä–∏.'


    await context.bot.send_message(chat_id=update.effective_chat.id, text=text)

async def whois_cleaning(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Show flatmate who clean"""
    record = table.first(formula=match({"isCleaning": True}))
    username = record['fields']['username']
    await context.bot.send_message(chat_id=update.effective_chat.id, text=f'–ó–∞—Ä–∞–∑ —á–µ—Ä–≥–∞ @{username}')

async def fuck_off(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """f o"""
    flatmate = update.callback_query.from_user
    await context.bot.send_photo(
        chat_id=update.effective_chat.id, 
        caption=f'@{flatmate.first_name } —ñ–¥—ñ –Ω–∞—Ö—É–π',
        photo="https://s3-eu-central-1.amazonaws.com/hromadskeprod/pictures/files/000/032/877/original/05b6107d0a8b15719a4dcee9bc93bd1d.jpg?1504796052")

async def reply(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Listen to key words and answer"""
    phrases = [
        (['+'], 'https://imgur.com/a/znlSLjw'),
        (['—Å–æ–±–∞–∫–∞'], '—Å–æ–±–∞–∫–∞–∞–∞–∞, –≤–æ–Ω–∞ –∫—Ä–∞—â–µ –Ω—ñ–∂ –≤–∏ –ª—é–¥–∏, –ª—é–¥—è–º –¥–æ–≤—ñ—Ä—è—Ç–∏ –Ω–µ –º–æ–∂–Ω–æ, –æ—Ç —Å–æ–±–∞–∫–∏ –≤–æ–Ω–∏ –Ω–∞–π–∫—Ä–∞—â—ñ...'),
        (['—á–æ—Ä—Ç'], '–∞ —â–æ –æ–¥—Ä–∞–∑—É —á–æ—Ä—Ç????'),
        (['–ø–µ–ø—Å—ñ'], '–∫–æ–∫ –∫–æ–ª–∞ –∫—Ä–∞—â–µ'),
        (['–∫–æ–ª–∞'], '–ø–µ–ø—Å—ñ –∫—Ä–∞—â–µ'),
        (['—Ç–∞–∫'], '–ø—ñ–∑–¥–∞–∫'),
        (['–±–æ—Ç'], '–∞? —â–æ –≤–∂–µ –±–æ—Ç —Ç–æ?'),
        (['—Å–∞–ª–æ'], '–∞ –±–æ—Ä—â?'),
        (['–±–æ—Ä—â'], '–∞ —Å–∞–ª–æ?'),
        (['–º–∞–≥–∞–∑–∏–Ω', '–Ω–æ–≤—É—Å', '—Å—ñ–ª—å–ø–æ', '–∫–∏—à–µ–Ω—è', '—Ñ–æ—Ä–∞'], '–∫—É–ø–∏—Ç—å –º–µ–Ω—ñ –ø–∏–∏–∏–∏–≤–≤–∞–∞–∞–∞–∞'),
        (['—Å—É–∫–∞'], 'https://uk.wikipedia.org/wiki/%D0%9C%D1%96%D0%B7%D0%BE%D0%B3%D1%96%D0%BD%D1%96%D1%8F'),
        (['—Ä–∞—à–∫–∞'], '–Ω–µ "—Ä–∞—à–∫–∞", –∞ –ø–∏–¥–æ—Ä–∞—Ö–∏—è –±–ª–∏–Ω–æ–ª–æ–ø–∞—Ç–Ω–∞—è —Å–∫–æ—Ç–æ—É–±–ª—é–¥–∏—è, —Å–≤–∏–Ω–æ—Å–æ–±–∞—á–∏–π —Ö—É–π–ª–æ—Å—Ç–∞–Ω, —Ä–∞–±—Å–∫–∏–µ –≤—ã–º–∏—Ä–∞—Ç—ã –∏ –Ω–µ—Ñ—Ç–µ–¥—ã—Ä–Ω–æ–µ –ø—ã–Ω–µ–±–∞–±–≤–µ'),
        (['—Ö–æ–∑—è–π–∫–∞', '—Ö–æ–∑—è–π–∫–∏', '—Ö–æ–∑—è–π–∫—É'], '–Ø –ø—ñ–∑–¥–æ–ª—ñ–≤, –∂–æ–ø–æ–ª—ñ–∑ —Ö–æ–∑—è–π–∫–∏, –±—É–¥—É —É–Ω—ñ—Ç–∞–∑–æ–º-–º–æ—á–µ–≥–ª–æ—Ç–æ–º. –•–æ—á—É –ª—ñ–∑–∞—Ç–∏ –≤–æ–ª–æ—Å–∞—Ç—É, –Ω–µ–º–∏—Ç—É –ø—ñ–∑–¥—É –ø—ñ–¥ —á–∞—Å —ó—ó –º–µ–Ω—Å—Ç—Ä—É–∞—Ü—ñ—ó. –Ø–∫—â–æ —Ö–æ–∑—è–π–∫–∞ —Ç—Ä–∞—Ö–∞–ª–∞—Å—å ‚Äî —Ç–æ —Ç—ñ–ª—å–∫–∏ –ø—ñ—Å–ª—è —Ä–µ—Ç–µ–ª—å–Ω–æ–≥–æ –º–∏—Ç—å—è. –•–æ—á—É –ø–∏—Ç–∏ –º–æ—á—É —ñ –≥–ª–æ—Ç–∞—Ç—å –≤—Å—ñ –≤–∏–¥—ñ–ª–µ–Ω–Ω—è —Ö–æ–∑—è–π–∫–∏. –í–∏–ª–∏–∂—É –∂–æ–ø—É —É –∞–Ω—É—Å—ñ.'),
    ]

    message = re.findall(r'\b\S+\b|\+', str(update.message.text).lower())
    for phrase in phrases:
        for key in phrase[0]:
            if key in message:
                await update.message.reply_text(phrase[1])

async def unknown(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Answer to unknown command"""
    await update.message.reply_text('–©–æ —Ü–µ –∑–∞ –∫–æ–º–∞–Ω–¥–∞? –¢–∏ —â–æ –¥–µ–±—ñ–ª?')

async def post_init(application: ApplicationBuilder) -> None:
    await application.bot.set_my_commands([
        ('start', '–í—ñ—Ç–∞–Ω–Ω—è —Ç–∞ –æ—Å–Ω–æ–≤–Ω—ñ –∫–æ–º–∞–Ω–¥–∏'),
        ('done', '–Ø –ø—Ä–∏–±—Ä–∞–≤—Å—è!'),
        ('whois_cleaning', '–•—Ç–æ –∑–∞—Ä–∞–∑ –ø—Ä–∏–±–∏—Ä–∞—î?'),
        ('daily', '–©–æ —Ç–∞–º —Å—å–æ–≥–æ–¥–Ω—ñ?'),
    ])

if __name__ == '__main__':
    logger.info("üñ§ Flatmate Telegram Bot")
    application = ApplicationBuilder().token(TELEGRAM_TOKEN).post_init(post_init).build()

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            START_ROUTES: [
                CallbackQueryHandler(whois_cleaning, pattern="^" + str(WHOIS_CLEANING) + "$"),
                CallbackQueryHandler(add_flatmate, pattern="^" + str(ADD_FLATMATE) + "$"),
                CallbackQueryHandler(fuck_off, pattern="^" + str(FUCK_OFF) + "$"),
                # CallbackQueryHandler(four, pattern="^" + str(FOUR) + "$"),
            ],
            # END_ROUTES: [
                # CallbackQueryHandler(start_over, pattern="^" + str(ONE) + "$"),
                # CallbackQueryHandler(end, pattern="^" + str(TWO) + "$"),
            # ],
        },
        fallbacks=[CommandHandler("start", start)],
    )

    reply_handler = MessageHandler(filters.TEXT & ~filters.COMMAND, reply)
    done_handler = CommandHandler('done', done)
    daily_handler = CommandHandler('daily', daily)
    whois_cleaning_handler = CommandHandler('whois_cleaning', whois_cleaning)
    unknown_handler = MessageHandler(filters.COMMAND, unknown)

    application.add_handler(conv_handler)
    application.add_handler(reply_handler)
    application.add_handler(done_handler)
    application.add_handler(daily_handler)
    application.add_handler(whois_cleaning_handler)
    application.add_handler(unknown_handler)
    
    application.run_polling()